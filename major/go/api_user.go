/*
 * MySocial API
 *
 * Social network. There are users on the social network who can register, create, update and delete posts, get their own wall with posts, view walls with posts from other users, like and view statistics on posts in the form of the number of likes and views, as well as leave comments on posts and view them.
 *
 * API version: 1.0
 * Contact: neazhazha@edu.hse.ru
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"encoding/json"
	"github.com/redis/go-redis/v9"
	"golang.org/x/crypto/bcrypt"
	"log"
	"math/rand"
	"net/http"
	"strconv"
)

func UserAuth(w http.ResponseWriter, r *http.Request) {
	client := redis.NewClient(&redis.Options{
		Addr:     "localhost:6379",
		Password: "",
		DB:       0,
	})
	defer client.Close()

	login := r.URL.Query().Get("login")

	ctx := context.Background()
	val, err := client.Get(ctx, login).Result()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	var dbUser DataBaseUser
	err = json.Unmarshal([]byte(val), &dbUser)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	password := r.URL.Query().Get("password")
	err = bcrypt.CompareHashAndPassword([]byte(dbUser.User.Password), []byte(password))
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	newSessionId := rand.Int31()
	dbUser.SessionID = newSessionId

	jsonUser, err := json.Marshal(dbUser)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	err = client.Set(ctx, login, jsonUser, 0).Err()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	sessionId := SessionId{newSessionId}
	err = json.NewEncoder(w).Encode(sessionId)
	if err != nil {
		log.Println("6")
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UserReg(w http.ResponseWriter, r *http.Request) {
	client := redis.NewClient(&redis.Options{
		Addr:     "localhost:6379",
		Password: "",
		DB:       0,
	})
	defer client.Close()

	var newUser User
	err := json.NewDecoder(r.Body).Decode(&newUser)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	ctx := context.Background()

	_, err = client.Get(ctx, newUser.Login).Result()
	if err != redis.Nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	if newUser.Password == "" {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	hashPassword, err := bcrypt.GenerateFromPassword([]byte(newUser.Password), 11)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	sessionId := rand.Int31()
	dbUser := DataBaseUser{
		SessionID: sessionId,
		User:      User{Login: newUser.Login, Password: string(hashPassword)},
	}

	jsonUser, err := json.Marshal(dbUser)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	err = client.Set(ctx, newUser.Login, jsonUser, 0).Err()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	err = json.NewEncoder(w).Encode(SessionId{SessionID: sessionId})
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusCreated)
}

func UserUpdate(w http.ResponseWriter, r *http.Request) {
	client := redis.NewClient(&redis.Options{
		Addr:     "localhost:6379",
		Password: "",
		DB:       0,
	})
	defer client.Close()

	sessionId, err := strconv.Atoi(r.Header.Get("sessionID"))
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	login := r.Header.Get("login")
	ctx := context.Background()
	val, err := client.Get(ctx, login).Result()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	var dbUser DataBaseUser
	err = json.Unmarshal([]byte(val), &dbUser)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	if dbUser.SessionID != int32(sessionId) {
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}

	var userInfo Information
	err = json.NewDecoder(r.Body).Decode(&userInfo)
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	dbUser.Info = userInfo
	jsonUser, err := json.Marshal(dbUser)
	err = client.Set(ctx, login, jsonUser, 0).Err()
	if err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}

	w.WriteHeader(http.StatusOK)
}
